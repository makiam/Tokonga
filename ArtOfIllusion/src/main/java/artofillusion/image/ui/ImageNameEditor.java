/* Copyright 2024 by Maksim Khramov

   This program is free software; you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation; either version 2 of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but WITHOUT ANY 
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */

package artofillusion.image.ui;

import artofillusion.image.ExternalImage;
import artofillusion.image.ImageDetailsDialog;
import artofillusion.image.ImageMap;
import artofillusion.ui.Translate;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.GroupLayout;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import lombok.extern.slf4j.Slf4j;

/**
 *
 * @author MaksK
 */
@Slf4j
public class ImageNameEditor extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    private String autoText, userText;
    private boolean automatic = false;
    private final ImageMap image;
    
    /**
     * Creates new form ImageNameEditor
     * @param parent
     * @param im
     */
    public ImageNameEditor(ImageDetailsDialog parent, ImageMap im) {
        super(parent.getComponent(), true);
        this.image = im;
        autoText = userText = image.getName();

        initComponents();
        if(image instanceof ExternalImage) {
            String fileName = image.getFile().getName();
            autoText = fileName.substring(0, fileName.lastIndexOf('.'));
            autoBox.setEnabled(true);
            automatic = ((ExternalImage) image).isNameAutomatic();
            autoBox.setSelected(automatic);
            autoBoxActionPerformed(null);
        }

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
        
        Rectangle pb = parent.getBounds();
        Rectangle tb = getBounds();
        setLocation(pb.x + (pb.width - tb.width) / 2, pb.y + (625 - tb.height));
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTextField jTextField1 = new JTextField();
        JButton okButton = new JButton();
        JButton cancelButton = new JButton();
        JLabel imageNameLabel = new JLabel();
        nameField = new JTextField();
        nameField.getDocument().addDocumentListener((TextInputListener) event -> textChanged());
        autoBox = new JCheckBox();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(Translate.text("nameDialogTitle"));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(this::okButtonActionPerformed);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this::cancelButtonActionPerformed);

        imageNameLabel.setLabelFor(imageNameLabel);
        imageNameLabel.setText("Image Name:");

        nameField.setColumns(50);
        nameField.setText(image.getName());

        autoBox.setText("Automatic");
        autoBox.setEnabled(false);
        autoBox.addActionListener(this::autoBoxActionPerformed);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageNameLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(autoBox)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(nameField))))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {cancelButton, okButton});

        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(imageNameLabel)
                    .addComponent(nameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (automatic) {
            image.setName(autoText);
        } else {
            image.setName(userText);
        }
        if (image instanceof ExternalImage) {
            ((ExternalImage) image).setNameAutomatic(automatic);
        }
        org.greenrobot.eventbus.EventBus.getDefault().post(new ImageDetailsDialog.ImageNameChangeEvent());
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void autoBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_autoBoxActionPerformed
        // TODO add your handling code here:
        automatic = autoBox.isSelected();
        nameField.setEnabled(!automatic);
        if (automatic) {
            nameField.setText(autoText);
        } else {
            nameField.setText(userText);
        }
    }//GEN-LAST:event_autoBoxActionPerformed
    
    private void textChanged() {
        if (!automatic) {
            userText = nameField.getText();
        }
    }
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox autoBox;
    private JTextField nameField;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
    
    
    @FunctionalInterface
    public interface TextInputListener extends DocumentListener {
        void update(DocumentEvent de);
        
        @Override
        default void changedUpdate(DocumentEvent de) {
            update(de);
        }

        @Override
        default void insertUpdate(DocumentEvent de)  {
            update(de);            
        }

        @Override
        default void removeUpdate(DocumentEvent de) {
            update(de);            
        }
        
    }
}
