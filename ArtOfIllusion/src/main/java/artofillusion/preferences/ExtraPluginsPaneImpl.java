/* Copyright (C) 2023 by Maksim Khramov

   This program is free software; you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation; either version 2 of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */

package artofillusion.preferences;

import artofillusion.PluginRegistry;
import buoy.widget.Widget;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JList;

/**
 *
 * @author MaksK
 */
public class ExtraPluginsPaneImpl extends javax.swing.JPanel {
    private final Map<String, PreferencesEditor> em = populatePluginsMap();
    /**
     * Creates new form ExtraPluginsPaneImpl
     */
    public ExtraPluginsPaneImpl() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane();
        pluginsList = new JList(em.keySet().toArray(new String[0]));
        widgetPanel = new javax.swing.JPanel();

        pluginsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pluginsListValueChanged(evt);
            }
        });
        scrollPane.setViewportView(pluginsList);

        widgetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        widgetPanel.setName("Title"); // NOI18N
        widgetPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(widgetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(widgetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pluginsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pluginsListValueChanged
        // TODO add your handling code here:
        String name = pluginsList.getModel().getElementAt(pluginsList.getSelectedIndex());

        Widget widget = em.get(name).getPreferencesPanel();
        widgetPanel.removeAll();
        widgetPanel.add(new buoy.widget.BuoyComponent(widget));
        widgetPanel.updateUI();

    }//GEN-LAST:event_pluginsListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> pluginsList;
    private javax.swing.JPanel widgetPanel;
    // End of variables declaration//GEN-END:variables


    private static Map<String, PreferencesEditor>  populatePluginsMap() {
        Map<String, PreferencesEditor> em = new HashMap<>();
        PluginRegistry.getPlugins(artofillusion.preferences.PreferencesEditor.class).forEach(editor -> {
            em.put(editor.getName(), editor);
        });
        return em;
    }

    void saveChanges() {
        em.values().forEach(editor -> editor.savePreferences());
    }


}
